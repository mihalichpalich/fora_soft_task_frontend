{"version":3,"sources":["core/socket.js","core/axios.js","pages/JoinBlock/JoinBlock.jsx","components/ChatUsers/ChatUsers.js","components/ChatMessagePanel/MessageList/Message/Message.js","components/ChatMessagePanel/MessageList/MessageList.js","components/ChatMessagePanel/MessageForm/MessageForm.js","components/ChatMessagePanel/ChatMessagePanel.js","pages/Chat/Chat.jsx","reducers/reducer.js","App.js","index.js"],"names":["socket","io","axios","defaults","baseURL","process","SERVER_PROD_URL","JoinBlock","match","onLogin","useState","params","id","roomId","setRoomId","userName","setUserName","nameWarning","setNameWarning","isLoading","setIsLoading","wrongRoomIdWarning","setWrongRoomIdWarning","useEffect","randomId","onEnter","a","dataObj","post","connect","className","type","placeholder","value","onChange","e","target","trim","to","onClick","disabled","ChatUsers","onGoBack","users","map","name","index","key","href","window","location","style","fontSize","Message","message","text","sendingTime","MessageList","messages","messagesRef","useRef","current","scrollTo","ref","MessageForm","onAddMessage","messageValue","setMessageValue","onSendMessage","emit","dayjs","format","onKeyPress","preventDefault","rows","ChatMessagePanel","Chat","onUnjoin","disconnect","defaultProps","state","action","joined","payload","App","useReducer","reducer","dispatch","obj","get","data","setUsers","addMessage","unjoin","on","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4db64eda.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst socket = io();\n\nexport default socket","import axios from 'axios';\n\naxios.defaults.baseURL = process.env.SERVER_PROD_URL;\n\nexport default axios","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport randomId from 'random-id';\nimport PropTypes from 'prop-types';\n\nimport axios from '../../core/axios';\nimport socket from \"../../core/socket\";\nimport './JoinBlock.scss';\n\n/**\n * Component for logging in to the chat\n * @param {object} match Object with query params\n * @param {func} onLogin Function for logging in into the room and load users and messages\n * @component\n */\n\nconst JoinBlock = ({match, onLogin}) => {\n    const [roomId, setRoomId] = useState(match.params.id);\n    const [userName, setUserName] = useState('');\n    const [nameWarning, setNameWarning] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [wrongRoomIdWarning, setWrongRoomIdWarning] = useState(false);\n\n    /**\n     * Set the roomID unless it's not inside the query\n     * If it is, check if it consists of 10 symbols - lowercase letters and numbers\n     */\n\n    useEffect(() => {\n        if (!roomId) {\n            setRoomId(randomId(10, 'a0'));\n        } else {\n            if (roomId.match('(?=.*[0-9])(?=.*[a-z])[0-9a-z]{10}') === null) {\n                setWrongRoomIdWarning(true)\n            }\n        }\n    }, [roomId]);\n\n    /**\n     * Function to check the username, create the room in the server and send the users data\n     */\n\n    const onEnter = async () => {\n        const dataObj = {\n            roomId,\n            userName\n        };\n\n        if (!userName) {\n            setNameWarning(true)\n        } else {\n            setIsLoading(true);\n            await axios.post('/rooms', dataObj);\n            socket.connect();\n            onLogin(dataObj);\n            setNameWarning(false)\n        }\n    };\n\n    return (\n        <div className=\"join-block\">\n            {wrongRoomIdWarning\n                ? <p className=\"text-danger\">RoomID is wrong!</p>\n                : (\n                    <>\n                        <input type=\"text\" placeholder=\"Your name\" value={userName} onChange={e => setUserName(e.target.value.trim())}/>\n\n                        <Link to={`/dialog/${roomId}`}>\n                            <button className=\"btn btn-success\" onClick={onEnter} disabled={isLoading}>\n                                {isLoading ? 'Loading...' : 'ENTER'}\n                            </button>\n                        </Link>\n\n                        <p>Your room ID is: {roomId}</p>\n                        {nameWarning ? <p className=\"text-danger\">Username is required!</p> : null}\n                    </>\n                )\n            }\n        </div>\n    );\n};\n\nJoinBlock.propTypes = {\n    match: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default JoinBlock;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport './ChatUsers.scss';\n\n/**\n * Component with the list of users in the room, logging out button and the invitation link\n * @param roomId\n * @param onGoBack Function for logging out and disconnecting from the room\n * @param users\n * @component\n */\n\nconst ChatUsers = ({roomId, onGoBack, users}) => {\n    return (\n        <div className=\"chat-users\">\n            RoomID: <b>{roomId}</b>\n            <hr/>\n\n            <Link onClick={() => onGoBack()} to={`/dialog/${roomId}`}>\n                <button type=\"button\" className=\"btn btn-secondary chat-go-back\">Back</button>\n            </Link>\n\n            <b>Online:</b>\n            <ul>\n                {users.map((name, index) => <li key={name + index}>{name}</li>)}\n            </ul>\n\n            <p className=\"chat-users-invitation-link\">\n                The link for invitation: <a\n                                            href={window.location.href}\n                                            style={{fontSize: 11}}>{window.location.href}</a>\n            </p>\n        </div>\n    );\n};\n\nexport default ChatUsers;","import React from 'react';\n\nimport './Message.scss';\n\nconst Message = ({message, index, userName}) => {\n    return (\n        <div className={(message.userName !== userName) ? \"message\" : \"message message-is-me\"}\n        >\n            <p>{message.text}</p>\n\n            <div>\n                <span className=\"message-username\">{message.userName}</span>\n                <span>{message.sendingTime}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;","import React, {useEffect, useRef} from 'react';\n\nimport './MessageList.scss';\nimport Message from \"./Message/Message\";\n\n/**\n * Component with the list of messages\n * @param {array} messages\n * @param {string} userName\n * @component\n */\n\nconst MessageList = ({messages, userName}) => {\n    const messagesRef = useRef(null);\n\n    /**\n     * Set the scroll for the message list\n      */\n    useEffect(() => {\n        messagesRef.current.scrollTo(0, 99999)\n    }, [messages]);\n\n    return (\n        <div ref={messagesRef} className=\"message-list\">\n            {messages.map((message, index) => (\n                <Message message={message} key={index} userName={userName}/>\n            ))}\n        </div>\n    );\n};\n\nexport default MessageList;","import React, {useState} from 'react';\nimport dayjs from \"dayjs\";\n\nimport './MessageForm.scss';\nimport socket from \"../../../core/socket\";\n\n/**\n * Component for messages sending\n * @param {string} userName\n * @param {string} roomId\n * @param {func} onAddMessage\n * @component\n */\n\nconst MessageForm = ({userName, roomId, onAddMessage}) => {\n    const [messageValue, setMessageValue] = useState('');\n\n    /**\n     * Send message after key pressing\n     * @param {object} e the handler object\n     */\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            onSendMessage()\n        }\n    };\n\n    /**\n     * Function for sending a message by sockets and dispatching it to the state\n     */\n    const onSendMessage = () => {\n        socket.emit('ROOM:NEW_MESSAGE', {\n            userName,\n            roomId,\n            text: messageValue,\n            sendingTime: dayjs().format('D-MM-YYYY HH:mm')\n        });\n        onAddMessage({userName, text: messageValue, sendingTime: dayjs().format('D-MM-YYYY HH:mm')});\n        setMessageValue('')\n    };\n\n    return (\n        <form className=\"message-form\">\n                <textarea\n                    value={messageValue}\n                    onChange={e => setMessageValue(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"form-control\"\n                    rows=\"3\" />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={onSendMessage}>Send</button>\n        </form>\n    );\n};\n\nexport default MessageForm;","import React from 'react';\n\nimport './ChatMessagePanel.scss';\nimport MessageList from \"./MessageList/MessageList\";\nimport MessageForm from \"./MessageForm/MessageForm\";\n\n/**\n * Main component for sending and receiving messages\n * @param {array} messages\n * @param {string} userName\n * @param {string} roomId\n * @param {func} onAddMessage\n * @component\n */\n\nconst ChatMessagePanel = ({messages, userName, roomId, onAddMessage}) => {\n    return (\n        <div className=\"chat-message-panel\">\n            <MessageList messages={messages} userName={userName}/>\n            <MessageForm userName={userName} roomId={roomId} onAddMessage={onAddMessage}/>\n        </div>\n    );\n};\n\nexport default ChatMessagePanel;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport socket from '../../core/socket';\nimport './Chat.scss';\nimport ChatUsers from \"../../components/ChatUsers/ChatUsers\";\nimport ChatMessagePanel from \"../../components/ChatMessagePanel/ChatMessagePanel\";\n\n/**\n * Main component for the chat\n * @param {array} users Array of users\n * @param {array} messages Array of messages\n * @param {string} userName Username\n * @param {string} roomId RoomID\n * @param {func} onAddMessage Function for dispatching message to the state\n * @param {func} onUnjoin Function for logging out from the chat\n * @component\n */\n\nconst Chat = ({users, messages, userName, roomId, onAddMessage, onUnjoin}) => {\n    /**\n     * Function for logging out and disconnecting from the room\n     */\n    const goBack = () => {\n        socket.disconnect();\n        onUnjoin();\n    };\n\n    return (\n        <div className=\"chat\">\n            <ChatUsers roomId={roomId} onGoBack={goBack} users={users}/>\n            <ChatMessagePanel messages={messages} userName={userName} roomId={roomId} onAddMessage={onAddMessage}/>\n        </div>\n    );\n};\n\nChat.propTypes = {\n    users: PropTypes.array.isRequired,\n    messages: PropTypes.array.isRequired,\n    userName: PropTypes.string.isRequired,\n    roomId: PropTypes.string.isRequired,\n    onAddMessage: PropTypes.func.isRequired,\n    onUnjoin: PropTypes.func.isRequired\n};\n\nChat.defaultProps = {\n    messages: []\n};\n\nexport default Chat;","export default (state, action) => {\n    switch (action.type) {\n        case 'JOINED':\n            return {\n                ...state,\n                joined: true,\n                roomId: action.payload.roomId,\n                userName: action.payload.userName\n            };\n\n        case 'SET_DATA':\n            return {\n                ...state,\n                users: action.payload.users,\n                messages: action.payload.messages\n            };\n\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.payload\n            };\n\n        case 'NEW_MESSAGE':\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            };\n\n        case 'UNJOINED':\n            return {\n                ...state,\n                joined: false\n            };\n\n        default:\n            return state\n    }\n}","import React, {useEffect, useReducer} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport socket from './core/socket';\nimport axios from './core/axios';\nimport JoinBlock from \"./pages/JoinBlock/JoinBlock\";\nimport Chat from \"./pages/Chat/Chat\";\nimport reducer from './reducers/reducer';\nimport './App.scss';\n\n/**\n * Main component for chat\n * @component\n */\n\nconst App = () => {\n    /**\n     * Initial app state\n     */\n\n    const [state, dispatch] = useReducer(reducer, {\n        joined: false,\n        roomId: null,\n        userName: null,\n        users: [],\n        messages: []\n    });\n\n    /**\n     * Function to join the created room and set the data inside\n     * @param {object} obj Object with user data (roomID and username)\n     */\n\n    const onLogin = async (obj) => {\n        dispatch({\n            type: 'JOINED',\n            payload: obj\n        });\n\n        socket.emit('ROOM:JOIN', obj);\n        const {data} = await axios.get(`/room/${obj.roomId}`);\n        dispatch({\n            type: 'SET_DATA',\n            payload: data\n        })\n    };\n\n    /**\n     * Dispatch users to the state\n     * @param {array} users Array of users\n     */\n\n    const setUsers = (users) => {\n        dispatch({\n            type: 'SET_USERS',\n            payload: users\n        })\n    };\n\n    /**\n     * Dispatch message to the state\n     * @param {object} message Object with message data (username, text and sending date)\n     */\n\n    const addMessage = (message) => {\n        if (message.text) {\n            dispatch({\n                type: 'NEW_MESSAGE',\n                payload: message\n            })\n        }\n    };\n\n    /**\n     * Function for logging out from the chat\n     */\n\n    const unjoin = () => {\n        dispatch({\n            type: 'UNJOINED'\n        })\n    };\n\n    /**\n     * Get arrays of users and messages in the room\n     */\n\n    useEffect(() => {\n        socket.on('ROOM:SET_USERS', setUsers);\n        socket.on('ROOM:NEW_MESSAGE', addMessage);\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={({match}) => <JoinBlock onLogin={onLogin} match={match}/>}/>\n                    <Route\n                        path=\"/dialog/:id\"\n                        render={({match}) => (\n                            !state.joined\n                                ? <JoinBlock onLogin={onLogin} match={match}/>\n                                : <Chat {...state} onAddMessage={addMessage} onUnjoin={unjoin}/>\n                        )}\n                    />\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}